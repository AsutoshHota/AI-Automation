
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List</title>
    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .container {
            width: 80%;
            max-width: 800px;
            background-color: #fff;
            margin: 20px 0;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1,h2 {
            text-align: center;
            color: #555;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #555;
        }
        .form-group input[type="text"],
        .form-group input[type="password"],
        .form-group input[type="date"],
        .form-group textarea,
        .form-group select {
            width: calc(100% - 12px);
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .form-group textarea {
            height: 80px;
        }
        .form-group button {
            background-color: #5cb85c;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 5px;
        }
        .form-group button:hover {
            background-color: #4cae4c;
        }
        .task-list {
            list-style: none;
            padding: 0;
        }
        .task-item {
            background-color: #f9f9f9;
            margin-bottom: 10px;
            padding: 10px;
            border: 1px solid #eee;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .task-actions button {
            background-color: #d9534f;
            color: white;
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
         .task-actions button:hover {
            background-color: #c9302c;
        }
        .task-item.completed {
           background-color: #dff0d8;
        }

        .task-item.completed .task-title {
           text-decoration: line-through;
           color:#777;
        }

        .task-item .task-details{
            flex-grow: 1;
            padding-right:10px;

        }

        .filter-sort {
            margin-bottom: 20px;
            text-align: center;
        }
        .filter-sort select, .filter-sort button {
            padding: 8px;
            margin: 5px;
        }
        .notification {
            background-color: #f0ad4e;
            color: white;
            padding: 10px;
            text-align: center;
            border-radius: 4px;
            margin-bottom: 10px;
        }
         /* Responsive design */
        @media (max-width: 768px) {
            .container {
                width: 95%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>To-Do List</h1>
        <div id="auth-section">
            <h2>Authentication</h2>
            <div id="auth-forms">
                <div id="login-form" style="display: none;">
                    <form id="login">
                         <div class="form-group">
                            <label for="login-username">Username</label>
                            <input type="text" id="login-username" required>
                         </div>
                         <div class="form-group">
                            <label for="login-password">Password</label>
                            <input type="password" id="login-password" required>
                         </div>
                          <div class="form-group">
                             <button type="submit">Login</button>
                             <button type="button" onclick="showRegistration()">Register</button>
                          </div>
                     </form>
                </div>

                 <div id="registration-form">
                    <form id="register">
                         <div class="form-group">
                            <label for="register-username">Username</label>
                            <input type="text" id="register-username" required>
                         </div>
                         <div class="form-group">
                            <label for="register-password">Password</label>
                            <input type="password" id="register-password" required>
                         </div>
                          <div class="form-group">
                              <button type="submit">Register</button>
                               <button type="button" onclick="showLogin()">Login</button>
                          </div>

                     </form>
                 </div>

            </div>
        </div>
        <div id="task-section" style="display: none;">
            <h2>Manage Tasks</h2>
            <div class="form-group">
                <input type="text" id="task-title" placeholder="Task Title">
            </div>
             <div class="form-group">
                <textarea id="task-description" placeholder="Description"></textarea>
            </div>
            <div class="form-group">
                 <label for="task-due-date">Due Date</label>
                <input type="date" id="task-due-date">
            </div>
            <div class="form-group">
                 <label for="task-priority">Priority</label>
                <select id="task-priority">
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                </select>
            </div>
            <div class="form-group">
                <label for="task-category">Category</label>
                <input type="text" id="task-category" placeholder="Category">
            </div>
            <div class="form-group">
                <button onclick="addTask()">Add Task</button>
            </div>

            <div class="filter-sort">
                <select id="filter-category">
                    <option value="all">All Categories</option>
                </select>
                <select id="sort-by">
                    <option value="due-date">Sort by Due Date</option>
                    <option value="priority">Sort by Priority</option>
                </select>
                <button onclick="applyFilterAndSort()">Apply</button>
            </div>

            <ul class="task-list" id="task-list">
            </ul>
        </div>
    </div>
   <div id="notification-area"></div>
    <script>
        let tasks = [];
        let user = null;

        // Element selections
        const loginForm = document.getElementById('login-form');
        const registerForm = document.getElementById('registration-form');
        const loginBtn = document.querySelector('#login form');
        const registerBtn = document.querySelector('#register form');
        const authSection = document.getElementById('auth-section');
        const taskSection = document.getElementById('task-section');
        const taskList = document.getElementById('task-list');
        const taskTitleInput = document.getElementById('task-title');
        const taskDescriptionInput = document.getElementById('task-description');
        const taskDueDateInput = document.getElementById('task-due-date');
        const taskPrioritySelect = document.getElementById('task-priority');
        const taskCategoryInput = document.getElementById('task-category');
        const filterCategorySelect = document.getElementById('filter-category');
        const sortBySelect = document.getElementById('sort-by');
        const notificationArea = document.getElementById('notification-area');


        // Show Login Form
        function showLogin(){
           registerForm.style.display="none";
           loginForm.style.display="block";
        }
        // Show Register Form
        function showRegistration(){
           loginForm.style.display="none";
           registerForm.style.display="block";
        }

        // Handle user registration
        registerBtn.addEventListener('submit',function(event){
           event.preventDefault();
           const username = document.getElementById('register-username').value;
           const password = document.getElementById('register-password').value;
           user={username, password};
            console.log('User registered:',user);
            authSection.style.display = 'none';
            taskSection.style.display = 'block';
            loadTasks();
        })

         // Handle user Login
        loginBtn.addEventListener('submit',function(event){
           event.preventDefault();
            const username = document.getElementById('login-username').value;
           const password = document.getElementById('login-password').value;

           // Placeholder for actual login verification
           if(user && user.username === username && user.password === password){
            console.log('User logged in:',user);
            authSection.style.display = 'none';
            taskSection.style.display = 'block';
             loadTasks();
           } else{
               alert('Invalid username or password')
           }
        })


        // Function to add task
        function addTask() {
            const title = taskTitleInput.value.trim();
            if (!title) return alert('Task title is required');

            const newTask = {
                id: Date.now(),
                title: title,
                description: taskDescriptionInput.value.trim(),
                dueDate: taskDueDateInput.value,
                priority: taskPrioritySelect.value,
                category: taskCategoryInput.value.trim(),
                status: 'pending'
            };
            tasks.push(newTask);
            taskTitleInput.value = '';
            taskDescriptionInput.value = '';
            taskDueDateInput.value = '';
            taskCategoryInput.value = '';
            renderTasks();
            saveTasks();
        }

        // Function to edit task
       function editTask(id){
            const taskIndex = tasks.findIndex(task => task.id === id);
            if (taskIndex === -1) return;

            const task = tasks[taskIndex];

            const newTitle = prompt("Edit Task Title",task.title);
            if (newTitle === null) return;

            const newDescription = prompt("Edit Task Description",task.description);
             if (newDescription === null) return;

            const newDueDate = prompt("Edit Due Date (YYYY-MM-DD)",task.dueDate);
             if (newDueDate === null) return;


            const newPriority = prompt("Edit Priority (low, medium, high)",task.priority);
            if (newPriority === null || !['low','medium','high'].includes(newPriority)) return;


             const newCategory = prompt("Edit Task Category",task.category);
            if (newCategory === null) return;



            tasks[taskIndex] = {
                ...task,
                 title: newTitle,
                description:newDescription,
                dueDate: newDueDate,
                priority: newPriority,
                category:newCategory
             };

            renderTasks();
            saveTasks();

       }

        // Function to delete task
        function deleteTask(id) {
            tasks = tasks.filter(task => task.id !== id);
            renderTasks();
            saveTasks();
        }


        //Function to toggle task status
       function toggleTaskStatus(id){
             const taskIndex = tasks.findIndex(task => task.id === id);
             if(taskIndex ===-1) return;

           tasks[taskIndex].status= tasks[taskIndex].status === 'pending' ? 'completed' : 'pending';
           renderTasks();
           saveTasks();
        }

        // Render tasks
        function renderTasks() {
             taskList.innerHTML = '';
            const filteredTasks = filterAndSortTasks();
            filteredTasks.forEach(task => {
                const listItem = document.createElement('li');
                listItem.classList.add('task-item');
                 if(task.status === 'completed'){
                     listItem.classList.add('completed');
                }
                let taskDetails = `<div class="task-details">
                <h4 class="task-title">${task.title}</h4>`;
                if(task.description) taskDetails+=`<p>Description : ${task.description}</p>`;
                if(task.dueDate) taskDetails+=`<p>Due Date : ${task.dueDate}</p>`;
                if(task.category) taskDetails+=`<p>Category : ${task.category}</p>`;
                taskDetails+=`<p>Priority : ${task.priority}</p></div>`;
                 listItem.innerHTML= taskDetails;



                let taskActions = document.createElement('div');
                taskActions.classList.add('task-actions');
                const completeBtn = document.createElement('button');
                completeBtn.textContent = task.status === 'pending' ? 'Mark Complete' : 'Mark Pending';
                completeBtn.onclick = () => toggleTaskStatus(task.id);
                taskActions.appendChild(completeBtn);

                const editBtn = document.createElement('button');
                editBtn.textContent = 'Edit';
                editBtn.onclick= () => editTask(task.id);
                taskActions.appendChild(editBtn);


                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = 'Delete';
                deleteBtn.onclick = () => deleteTask(task.id);
                taskActions.appendChild(deleteBtn);



                listItem.appendChild(taskActions);
                taskList.appendChild(listItem);

            });
            populateCategories();
            checkNotifications();
        }

       // Filter tasks
        function filterAndSortTasks(){
              let filteredTasks = [...tasks];

             // Apply Category Filter
            const selectedCategory = filterCategorySelect.value;
            if (selectedCategory !== 'all'){
                 filteredTasks = filteredTasks.filter(task=> task.category === selectedCategory);
            }

            // Apply Sorting
            const sortBy = sortBySelect.value;
            if(sortBy === 'due-date'){
                filteredTasks.sort((a,b) => new Date(a.dueDate) - new Date(b.dueDate));
            } else if(sortBy === 'priority'){
                 const priorityOrder = {high: 1, medium: 2, low: 3 };
                 filteredTasks.sort((a,b) => priorityOrder[a.priority] - priorityOrder[b.priority]);
            }
            return filteredTasks;
        }

        // Apply Filter
       function applyFilterAndSort(){
         renderTasks();
       }

        // Populate Categories in filter
        function populateCategories(){
           const categories = ['all',...new Set(tasks.map(task=> task.category).filter(category => category))];

            filterCategorySelect.innerHTML = '';
            categories.forEach(category=>{
              const option = document.createElement('option');
               option.value = category;
               option.textContent = category;
               filterCategorySelect.appendChild(option);
            })
        }

          // Check for notifications
       function checkNotifications(){
          const now = new Date();
          const upcomingTasks=[];
          const overdueTasks=[];

            tasks.forEach(task =>{
              if(task.dueDate){
                  const dueDate = new Date(task.dueDate);
                   const timeDiff = dueDate.getTime() - now.getTime();
                   const dayDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
                   if(dayDiff <= 2 && dayDiff> 0 ){
                       upcomingTasks.push(task);
                    } else if(dayDiff < 0){
                       overdueTasks.push(task);
                   }
              }
            })

            displayNotifications(upcomingTasks, overdueTasks);
       }

        // Display notification
        function displayNotifications(upcoming, overdue){
             let notificationMessage = '';
             if (upcoming.length > 0){
                  notificationMessage += `<div class="notification">
                  Upcoming Tasks : <br>
                  ${upcoming.map(task => `${task.title} (Due in ${Math.ceil((new Date(task.dueDate).getTime() - new Date().getTime())/ (1000 * 3600 *24) )} days)`).join('<br>')}</div>`
             }
             if(overdue.length > 0){
                 notificationMessage += `<div class="notification">
                  Overdue Tasks : <br>
                  ${overdue.map(task => task.title).join('<br>')}</div>`
            }

             notificationArea.innerHTML = notificationMessage;
        }

        // Save tasks to local storage
        function saveTasks() {
            localStorage.setItem('tasks', JSON.stringify(tasks));
        }

        // Load tasks from local storage
        function loadTasks() {
            const storedTasks = localStorage.getItem('tasks');
            if (storedTasks) {
                tasks = JSON.parse(storedTasks);
            }
           renderTasks();
        }


       // Initial Load
       if(!user){
        showRegistration();
        taskSection.style.display="none";
       }

    </script>
</body>
</html>

