
{
  "nodes": [
    {
      "parameters": {},
      "id": "73d9e91a-4a75-4862-a44e-e170963f105b",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "values": [
          {
            "name": "contractDetails",
            "value": ""
          },
           {
            "name": "serviceRequirements",
            "value": ""
          },
           {
            "name": "clientCriteria",
            "value": ""
          }
        ],
         "options": {}
      },
      "id": "3e7c58c2-9a98-4210-b90e-78349f5a0041",
      "name": "Input Form",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
       "position": [
        200,
        0
      ]
    },
     {
      "parameters": {
          "operation": "get",
          "url": "https://your-historical-sow-api.com/sow",
          "options": {}
      },
      "id": "f72b1e21-2a98-440e-8f37-395769c2f938",
      "name": "Fetch Historical SOW",
      "type": "n8n-nodes-base.httpRequest",
       "typeVersion": 1,
       "position": [
        400,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Code to analyze historical SOW and extract useful content\n// Input: items from 'Fetch Historical SOW' node\n\nconst historicalData = items[0].json;\n\nlet extractedContent = [];\n\n// Example: Extracting common clauses\nif (historicalData && Array.isArray(historicalData)) {\n  historicalData.forEach(item => {\n    if(item.clauses) {\n        extractedContent.push(...item.clauses)\n    }\n  });\n}\n\n\nreturn [\n  {\n    json: {\n      extractedContent: extractedContent\n    },\n  },\n];"
      },
      "id": "b5a2c29d-c8b7-4a1a-9b6a-0d9a5a7c1894",
      "name": "Analyze Historical SOW",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
       "position": [
        600,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Code to generate SOW document content dynamically\n// Input: items from 'Input Form' and 'Analyze Historical SOW'\n\nconst inputData = items[0].json;\nconst historicalContent = items[1].json.extractedContent;\n\nlet sowContent = `Scope of Work\\n\\n`;\n\n//Append Input Data\nsowContent += `Contract Details: ${inputData.contractDetails}\\n`;\nsowContent += `Service Requirements: ${inputData.serviceRequirements}\\n`;\nsowContent += `Client Criteria: ${inputData.clientCriteria}\\n\\n`;\n\n\n// Example: Adding historical content if available\nif (historicalContent && historicalContent.length > 0) {\n  sowContent += `\\nHistorical Insights:\\n`;\n  historicalContent.forEach(clause => {\n      sowContent += `- ${clause}\\n`\n  });\n\n}\n\n\nreturn [\n  {\n    json: {\n      sowDocument: sowContent\n    },\n  },\n];"
      },
      "id": "a1b2c3d4-e5f6-4789-9abc-def012345678",
      "name": "Generate SOW Content",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
       "position": [
        800,
        0
      ]
    },
    {
        "parameters": {
          "operation": "create",
          "documentId": "your-google-doc-id",
           "options": {}
        },
        "id": "d6e5f4a3-b2c1-4d0e-8f9a-0b7c6d5e4f3a",
        "name": "Google Docs",
        "type": "n8n-nodes-base.googleDocs",
        "typeVersion": 1,
         "position": [
          1000,
          0
        ]
      },
      {
      "parameters": {
          "toEmail": "email@email.com",
          "subject": "Generated SOW",
          "text": "Please find the SOW document attached."
      },
      "id": "f9c8b7a6-5d4e-4f32-8a1b-2c3d4e5f6a7b",
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
       "position": [
          1200,
          0
        ]
    }
  ],
  "connections": {
    "73d9e91a-4a75-4862-a44e-e170963f105b": {
      "main": [
        [
          {
            "node": "3e7c58c2-9a98-4210-b90e-78349f5a0041",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
     "3e7c58c2-9a98-4210-b90e-78349f5a0041": {
      "main": [
        [
          {
            "node": "f72b1e21-2a98-440e-8f37-395769c2f938",
            "type": "main",
            "index": 0
          }
         ]
       ]
     },
    "f72b1e21-2a98-440e-8f37-395769c2f938": {
      "main": [
        [
          {
            "node": "b5a2c29d-c8b7-4a1a-9b6a-0d9a5a7c1894",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "b5a2c29d-c8b7-4a1a-9b6a-0d9a5a7c1894": {
      "main": [
        [
          {
            "node": "a1b2c3d4-e5f6-4789-9abc-def012345678",
             "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "a1b2c3d4-e5f6-4789-9abc-def012345678": {
      "main": [
         [
          {
            "node": "d6e5f4a3-b2c1-4d0e-8f9a-0b7c6d5e4f3a",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
     "d6e5f4a3-b2c1-4d0e-8f9a-0b7c6d5e4f3a": {
      "main": [
        [
          {
            "node": "f9c8b7a6-5d4e-4f32-8a1b-2c3d4e5f6a7b",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "saveDataErrorExecution": true,
    "saveManualExecutions": true
  },
   "versionId": "5555e666-4444-4444-a444-444444444444",
  "name": "Writing Scope of Work for Service Contracts",
   "typeVersion": 2.2
}


